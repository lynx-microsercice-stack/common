services:
  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.9.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Kafka broker
  kafka:
    image: confluentinc/cp-kafka:7.9.1
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Kafka Connect with Debezium and Elasticsearch connectors
  kafka-connect:
    image: debezium/connect:3.0.0.Final
    container_name: kafka-connect
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8083"
    environment:
      # Connect worker configuration
      BOOTSTRAP_SERVERS: kafka:9092
      GROUP_ID: connect-cluster
      CONFIG_STORAGE_TOPIC: connect-configs
      OFFSET_STORAGE_TOPIC: connect-offsets
      STATUS_STORAGE_TOPIC: connect-status
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      KEY_CONVERTER_SCHEMAS_ENABLE: "false"
      VALUE_CONVERTER_SCHEMAS_ENABLE: "true"
      # Fix for binary data encoding issues
      CONNECT_CONVERTER_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      CONNECT_VALUE_CONVERTER_SCHEMAS_ENABLE: "false"
      # Disable handling binary data as base64
      CONNECT_VALUE_CONVERTER_DECIMAL_FORMAT: "NUMERIC"
      CONNECT_KEY_CONVERTER_DECIMAL_FORMAT: "NUMERIC"
      # Connector specific converters for proper type handling
      CONNECT_CONNECTOR_CLIENT_CONFIG_OVERRIDE_POLICY: "All"
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-connect
      # Enable connector configuration through API
      CONNECT_REST_PORT: 8083
      # Set to a larger value for better performance in production
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      # Plugin path for additional connectors
      CONNECT_PLUGIN_PATH: /kafka/connect/
    volumes:
      - ./plugins/kafka-connect-elasticsearch:/kafka/connect/elasticsearch
      - ./plugins/confluentinc-kafka-connect-jdbc:/kafka/connect/confluentinc-kafka-connect-jdbc
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/connectors"]
      interval: 10s
      timeout: 5s
      retries: 5
    extra_hosts:
      - "host.docker.internal:host-gateway"

  # Kafka UI for visual management
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      kafka:
        condition: service_healthy
      kafka-connect:
        condition: service_healthy
    ports:
      - "8089:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: kafka-connect
      KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect:8083
    extra_hosts:
      - "host.docker.internal:host-gateway"
  product-replication-database:
    image: postgres:16-alpine
    container_name: product-replication-database
    environment:
      - 'POSTGRES_DB=postgres'
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_USER=postgres'
    ports:
      - '5499:5432'
    volumes:
      - 'product-postgres:/var/lib/postgresql/data'
  # product-source-database:
  #   image: postgres:16-alpine
  #   container_name: product-source-database
  #   environment:
  #     - 'POSTGRES_DB=postgres'
  #     - 'POSTGRES_PASSWORD=postgres'
  #     - 'POSTGRES_USER=postgres'
  #   ports:
  #     - '5432:5432'
  #   command: 
  #     - "postgres"
  #     - "-c"
  #     - "wal_level=logical"
  #     - "-c" 
  #     - "max_wal_senders=10"
  #     - "-c"
  #     - "max_replication_slots=10"
  #   volumes:
  #     - 'product-postgres:/var/lib/postgresql/data'
volumes:
  # For connector plugins
  product-postgres:
  plugins:
